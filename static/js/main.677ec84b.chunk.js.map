{"version":3,"sources":["firebase/firebase-config.js","types/types.js","helpers/loadNotes.js","helpers/fileUpload.js","actions/notes.js","actions/ui.js","actions/auth.js","hooks/useForm.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","routers/AuthRouter.js","components/notes/NotesAppBar.js","components/notes/NoteScreen.js","components/jorunal/NothingSelected.js","components/jorunal/JournalEntry.js","components/jorunal/JournalEntries.js","components/jorunal/Sidebar.js","components/jorunal/JournalScreen.js","routers/PublicRoute.js","routers/PrivateRoute.js","routers/AppRouter.js","reducers/notesReducer.js","reducers/uiReducer.js","store/store.js","reducers/authReducer.js","JournalApp.js","index.js"],"names":["firebaseConfig","apiKey","process","REACT_APP_APIKEY","authDomain","REACT_APP_AUTHDOMAIN","databaseURL","REACT_APP_DATABASEURL","projectId","REACT_APP_PROJECTID","storageBucket","REACT_APP_STORAGEBUCKET","messagingSenderId","REACT_APP_MESSAGINGSENDERID","appId","REACT_APP_APPID","firebase","initializeApp","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","types","loadNotes","uid","a","collection","get","notesSnap","notes","forEach","snapHijo","push","id","data","fileUpload","file","formData","FormData","append","fetch","method","body","resp","ok","json","cloudResp","secure_url","addNewNote","note","type","payload","activeNote","startLoadingNotes","dispatch","setNotes","startSaveNote","getState","url","noteToFirestore","doc","update","refreshNote","Swal","fire","title","deleteNote","setError","err","finishLoading","startLoginEmailPassword","email","password","signInWithEmailAndPassword","then","user","login","displayName","catch","e","console","log","message","logout","useForm","initialState","useState","values","setValues","reset","newFormState","handleInputChange","target","name","value","LoginScreen","useDispatch","loading","useSelector","state","ui","formValues","className","onSubmit","preventDefault","placeholder","autoComplete","onChange","disabled","onClick","signInWithPopup","src","alt","to","RegisterScreen","msgError","password2","isFormValid","trim","length","validator","isEmail","createUserWithEmailAndPassword","updateProfile","startRegisterWithEmailPasswordName","AuthRouter","path","component","NotesAppBar","active","style","display","files","text","allowOutsideClick","willOpen","showLoading","fileUrl","close","startUploading","document","querySelector","click","NoteScreen","activeId","useRef","useEffect","current","delete","startDeleting","NothingSelected","JournalEntry","date","noteDate","moment","backgroundSize","backgroundImage","format","JournalEntries","map","key","Sidebar","signOut","newNote","Date","getTime","add","JournalScreen","PublicRoute","isLoggedIn","Component","rest","props","PrivateRoute","AppRouter","cheking","setCheking","setIsLoggedIn","onAuthStateChanged","exact","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","JournalApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.677ec84b.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_APIKEY,\r\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASEURL,\r\n    projectId: process.env.REACT_APP_PROJECTID,\r\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\r\n    appId: process.env.REACT_APP_APPID\r\n  };\r\n\r\n  //variable de entorno verlas\r\n // console.log(process.env);\r\n\r\n/*\r\nconst firebaseConfigTesting = {\r\n    apiKey: \"AIzaSyBCsdKUJ-5CMGU3XMQDUzeRSqDjV_9hR30\",\r\n    authDomain: \"redux-demo-pruebas.firebaseapp.com\",\r\n    databaseURL: \"https://redux-demo-pruebas.firebaseio.com\",\r\n    projectId: \"redux-demo-pruebas\",\r\n    storageBucket: \"redux-demo-pruebas.appspot.com\",\r\n    messagingSenderId: \"723814828715\",\r\n    appId: \"1:723814828715:web:cff66e4ffa1c18e06545ee\"\r\n  };\r\n\r\n  if ( process.env.NODE_ENV === 'test' ) {\r\n      //testing\r\n      firebase.initializeApp(firebaseConfigTesting);\r\n\r\n  } else {\r\n      //dev/prod\r\n      // Initialize Firebase\r\n      firebase.initializeApp(firebaseConfig);\r\n  };\r\n\r\n*/\r\n  //Para grabar información y google Auth Provider\r\n  firebase.initializeApp(firebaseConfig);\r\n  const db = firebase.firestore(); \r\n  const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {\r\n      db, \r\n      googleAuthProvider,\r\n      firebase\r\n  }","\r\nexport const types = {\r\n    login: '[Auth] Login',\r\n    logout: '[Auth] Logout',\r\n\r\n    //Tipos errores uiReducer\r\n    uiSetError: '[UI] Set Error',\r\n    uiRemoveError: '[UI] Remove Error',\r\n\r\n    //Loading\r\n    uiStartLoading: '[UI] Start loading',\r\n    uiFinishLoading: '[UI] Finish loading',\r\n\r\n    //JournalScreen - NOTES\r\n    notesAddNew: '[Notes] New note',\r\n    notesActive: '[Notes] Set active note',\r\n    notesLoad: '[Notes] Load notes',\r\n    notesUpdated: '[Notes] Updated note',\r\n    notesFileUrl: '[Notes] Updated image url',\r\n    notesDelete: '[Notes] Delete note',\r\n    notesLogoutCleaning: '[Notes] Logout Cleaning',\r\n}","import { db } from \"../firebase/firebase-config\"\r\n\r\n\r\nexport const loadNotes = async ( uid ) => {\r\n    //Referencia a la db\r\n    const notesSnap = await db.collection( `${ uid }/journal/notes` ).get();\r\n    const notes = [];\r\n\r\n    //console.log(notesSnap);\r\n\r\n    notesSnap.forEach( snapHijo => {\r\n        \r\n        //console.log(snapHijo.data());\r\n\r\n        notes.push({\r\n            id: snapHijo.id,\r\n            ...snapHijo.data()\r\n        })\r\n    });\r\n\r\n    //console.log(notes);\r\n    return notes;\r\n}","\r\n\r\nexport const fileUpload = async ( file ) => {\r\n    \r\n    const cloudUrl = 'https://api.cloudinary.com/v1_1/ddhgmsz5k/upload';\r\n\r\n    const formData = new FormData();\r\n    formData.append('upload_preset','react-journal');\r\n    formData.append( 'file', file );\r\n\r\n    try {\r\n        \r\n        const resp = await fetch( cloudUrl, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        if ( resp.ok ) {\r\n            const cloudResp = await resp.json();\r\n            return cloudResp.secure_url;\r\n        }else {\r\n            return null;\r\n        }\r\n\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n    //return url de la imagen\r\n}","import Swal from 'sweetalert2';\r\n\r\nimport { db } from \"../firebase/firebase-config\";\r\nimport { types } from \"../types/types\";\r\nimport { loadNotes } from \"../helpers/loadNotes\";\r\nimport { fileUpload } from '../helpers/fileUpload';\r\n\r\n//react-journal\r\n\r\n\r\n//Tarea asíncrona, crear nueva nota\r\nexport const startNewNote = () => {\r\n    return async ( dispatch, getState ) => {\r\n        \r\n        const {uid} = getState().auth;\r\n        \r\n        const newNote = {\r\n            title: '',\r\n            body: '',\r\n            date: new Date().getTime()\r\n        }\r\n\r\n        try {\r\n            const doc = await db.collection(`${ uid }/journal/notes`).add( newNote );\r\n            \r\n            dispatch( activeNote( doc.id, newNote ));\r\n            //activar nota creada\r\n            dispatch( addNewNote( doc.id, newNote ));    \r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n//Activar nota creada de una vez\r\nexport const addNewNote = ( id, note ) => ({\r\n    type: types.notesAddNew,\r\n    payload: {\r\n        id, ...note\r\n    }\r\n});\r\n\r\n//Activar nota\r\nexport const activeNote = ( id, note ) => ({\r\n\r\n    type: types.notesActive,\r\n    payload: {\r\n        id,\r\n        ...note\r\n    }\r\n});\r\n\r\n\r\n//cargar notas, función asincrona\r\nexport const startLoadingNotes = ( uid ) => {\r\n    return async ( dispatch ) => {\r\n        \r\n        const notes = await loadNotes( uid );\r\n        dispatch( setNotes( notes ) );\r\n\r\n    }\r\n}\r\n\r\n\r\n//Grabar notas obtenidas de firestore en nuestro store\r\nexport const setNotes = ( notes ) => ({\r\n    type: types.notesLoad,\r\n    payload: notes \r\n});\r\n\r\n\r\n//Grabar en la base de datos los cambios de la nota activa, firestore \r\n//tarea asíncrona\r\nexport const startSaveNote = ( note ) => {\r\n    return async ( dispatch, getState ) => {\r\n\r\n        const { uid } = getState().auth;\r\n\r\n        if( !note.url ){\r\n            delete note.url;\r\n        }\r\n\r\n        const noteToFirestore = { ...note };\r\n        delete noteToFirestore.id;\r\n\r\n        await db.doc(`${ uid }/journal/notes/${ note.id }`).update( noteToFirestore );\r\n\r\n        //acción que actualiza\r\n        dispatch( refreshNote( note.id, noteToFirestore ));\r\n        Swal.fire('Saved', note.title, 'success');\r\n    }\r\n}\r\n\r\n\r\n//Actualizar únicamente la nota que cambio en el store, la que se actualizo\r\nexport const refreshNote = ( id, note ) => ({\r\n     type: types.notesUpdated,\r\n     payload: {\r\n         id, \r\n         note: {\r\n             id,\r\n             ...note\r\n         }\r\n     }\r\n});\r\n\r\n//SUBIR IMAGÉN A CLOUDFIRE USANDO EL HELPER\r\nexport const startUploading = ( file ) => {\r\n    return async ( dispatch, getState ) => {\r\n        \r\n        const { active: activeNote } = getState().notes;\r\n        \r\n        Swal.fire({\r\n            title: 'Uploading...',\r\n            text: 'Please wait...',\r\n            allowOutsideClick: false,\r\n            willOpen: () => {\r\n                Swal.showLoading();\r\n            }\r\n        });\r\n        //petición asincrona del url de la imagen subida, helpers\r\n        const fileUrl = await fileUpload( file );\r\n        //console.log(fileUrl);\r\n\r\n        //ACTUALIZAR URL DE LA NOTA ACTIVA\r\n        activeNote.url = fileUrl;\r\n        dispatch( startSaveNote( activeNote ));\r\n\r\n        Swal.close();\r\n    \r\n    }\r\n}\r\n\r\n\r\n//BORRAR UNA NOTA, asíncrona\r\n\r\nexport const startDeleting = ( id ) => {\r\n    return async ( dispatch, getState ) => {\r\n\r\n        //borrar de firestore\r\n        const uid = getState().auth.uid;\r\n        await db.doc(`${ uid }/journal/notes/${ id  }`).delete();\r\n\r\n        //borrar del store\r\n        dispatch( deleteNote(id));\r\n\r\n    }\r\n}\r\n\r\n//Borrar de mi store la nota\r\nexport const deleteNote = (id) => ({\r\n    type: types.notesDelete,\r\n    payload: id\r\n})\r\n\r\n\r\n//PURGAR LAS NOTAS AL REALIZAR LOGOUT\r\nexport const notesLogout = () => ({\r\n    type: types.notesLogoutCleaning\r\n})","import { types } from \"../types/types\";\r\n\r\n\r\nexport const setError = ( err ) => ({\r\n    type: types.uiSetError,\r\n    payload: err\r\n});\r\n\r\n\r\nexport const removeError = () => ({\r\n    type: types.uiRemoveError,\r\n});\r\n\r\nexport const startLoading = () => ({\r\n    type: types.uiStartLoading,\r\n});\r\n\r\nexport const finishLoading = () => ({\r\n    type: types.uiFinishLoading,\r\n});","import Swal from 'sweetalert2';\r\n\r\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';    \r\n\r\n//accion que voy a llamar cuando tenga el uid y el displayname\r\nimport { types } from \"../types/types\"\r\nimport { notesLogout } from './notes';\r\nimport { finishLoading, startLoading } from './ui';\r\n\r\n\r\n//acción asíncrona -- petición - login \r\nexport const startLoginEmailPassword = ( email, password ) => {\r\n    return ( dispatch ) => {\r\n\r\n        dispatch(startLoading());\r\n\r\n        return firebase.auth().signInWithEmailAndPassword( email, password )\r\n        .then( ({ user }  ) => {\r\n            dispatch( login( user.uid, user.displayName ));\r\n\r\n            dispatch(finishLoading());\r\n\r\n        }).catch( e => {\r\n            console.log(e);\r\n            dispatch(finishLoading());\r\n            Swal.fire('Error', e.message, 'error');\r\n        });\r\n    }\r\n}\r\n\r\n//Acción asincrona google - Logearse con Google\r\nexport const startGoogleLogin = () => {\r\n    return ( dispatch ) => {\r\n        firebase.auth().signInWithPopup( googleAuthProvider )\r\n            .then( ({ user }) => {\r\n                dispatch(\r\n                    login( user.uid, user.displayName )\r\n                )\r\n            });\r\n\r\n    }\r\n}\r\n\r\n//Acción de crear usuario con Email y contraseña\r\n    //es una tarea asincrona por lo cual retorno un callBack\r\nexport const startRegisterWithEmailPasswordName = ( email, password, name) => {\r\n    return ( dispatch ) => {\r\n\r\n        firebase.auth().createUserWithEmailAndPassword( email, password )\r\n            .then( async({ user }) => {\r\n\r\n                await user.updateProfile({ displayName: name });\r\n\r\n                dispatch(\r\n                    login( user.uid, user.displayName )\r\n                )\r\n            }).catch( e => {\r\n                console.log(e);\r\n                Swal.fire('Error', e.message, 'error');\r\n            });\r\n    }\r\n}\r\n\r\n\r\n//acción que tiene que regresar LOGIN \r\nexport const login = ( uid, displayName ) => ({\r\n        type: types.login,\r\n        payload: {\r\n            uid,\r\n            displayName\r\n        }\r\n})\r\n\r\n//Logout\r\n//asincrona\r\nexport const startLogout = () => {\r\n    return async( dispatch ) => {\r\n        await firebase.auth().signOut();\r\n\r\n        dispatch( logout() );\r\n        dispatch( notesLogout() );\r\n    }\r\n}\r\n\r\nexport const logout = () => ({   //return como un objeto \r\n    type: types.logout\r\n})\r\n\r\n","import { useState } from \"react\"\r\n\r\n/*\r\nNuestro useForm recibe un objeto, que tiene las propiedades como un campo de texto,\r\nun selector, o un campo en mi formulario, el cual yo quiero manipular y tambien tengo\r\nel handleInputChange que me va servir a mi para leerlo rapidamente.\r\n*/\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n   \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = ( newFormState = initialState ) => {\r\n        setValues( newFormState );\r\n    }\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}","import React from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { startGoogleLogin, startLoginEmailPassword } from '../../actions/auth';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const LoginScreen = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state => state.ui);\r\n    //console.log(loading);\r\n\r\n    const [ formValues, handleInputChange ] = useForm({\r\n        email: 'stivenprod@mail.com',\r\n        password: '123456'\r\n    });\r\n\r\n    const { email, password } = formValues;\r\n\r\n    const handleLogin = (e) => {\r\n        console.log('Hola care cola');\r\n        e.preventDefault();\r\n        dispatch( startLoginEmailPassword(email, password));\r\n    }\r\n\r\n    const handleGoogleLogin = () => {\r\n        dispatch( startGoogleLogin() );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"auth__title\">Login</h3>\r\n\r\n            <form \r\n                onSubmit = { handleLogin }\r\n                className= \"animate__animated animate__fadeIn animate__faster\"\r\n            >\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    className=\"auth__input\"\r\n                    autoComplete=\"off\"\r\n                    value = { email }\r\n                    onChange = { handleInputChange }               \r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"password\"\r\n                    name=\"password\"\r\n                    className=\"auth__input\"   \r\n                    value = { password }  \r\n                    onChange = { handleInputChange }\r\n                />\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                    disabled = { loading }\r\n                >\r\n                    Login\r\n                </button>\r\n\r\n                <div className=\"auth__social-networks\">\r\n                    <p><b>Login with social networks</b></p>\r\n\r\n                    <div \r\n                        className=\"google-btn\"\r\n                        onClick={ handleGoogleLogin}\r\n                    >\r\n                        <div className=\"google-icon-wrapper\">\r\n                            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"google button\" />\r\n                        </div>\r\n                        <p className=\"btn-text\">\r\n                            <b>Sign in with google</b>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <Link \r\n                    to=\"/auth/register\"\r\n                    className=\"link\"\r\n                >\r\n                    Create new account\r\n                </Link>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport validator from 'validator';\r\nimport { removeError, setError } from '../../actions/ui';\r\nimport { startRegisterWithEmailPasswordName } from '../../actions/auth';\r\n\r\nexport const RegisterScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    //Obtener información del state redux\r\n    const {msgError} = useSelector(state => state.ui);\r\n    //console.log(msgError);\r\n\r\n    const [ formValues, handleInputChange ] = useForm({\r\n        name: 'Stiven',\r\n        email: 'stiven@mail.com',\r\n        password: '123456',\r\n        password2: '123456',\r\n    });\r\n\r\n    const { name, email, password, password2 } = formValues;\r\n\r\n    const handleRegister = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( isFormValid() ) {\r\n            //acción creación usuario\r\n            dispatch( startRegisterWithEmailPasswordName(email, password, name));\r\n        }\r\n    }\r\n\r\n    //Validación del formulario\r\n    const isFormValid = () => {\r\n\r\n        if( name.trim().length <= 2 ) {\r\n            dispatch(setError( 'Name is required' ))\r\n            return false;\r\n        } else if ( !validator.isEmail( email ) ) {\r\n            dispatch(setError( 'Email is not valid' ))\r\n            return false;\r\n        } else if ( password !== password2 || password.length < 5 ) {\r\n            dispatch(setError( 'Password should be at least 6 characters and match each other' ))\r\n            return false \r\n        }\r\n\r\n        dispatch(removeError());\r\n        return true\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"auth__title\">Register</h3>\r\n\r\n            <form \r\n                onSubmit = { handleRegister }\r\n                className= \"animate__animated animate__fadeIn animate__faster\"    \r\n            >\r\n\r\n                {\r\n                    msgError &&\r\n                    (\r\n                        <div className=\"auth__alert-error\">\r\n                            { msgError }\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    name=\"name\"\r\n                    className=\"auth__input\"\r\n                    autoComplete=\"off\"\r\n                    value = { name }\r\n                    onChange = { handleInputChange }\r\n\r\n                />\r\n                \r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    className=\"auth__input\"\r\n                    autoComplete=\"off\"\r\n                    value = { email }\r\n                    onChange = { handleInputChange }\r\n                />\r\n\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    className=\"auth__input\"     \r\n                    value = { password }\r\n                    onChange = { handleInputChange }                             \r\n                />\r\n\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm password\"\r\n                    name=\"password2\"\r\n                    className=\"auth__input\"  \r\n                    value = { password2 }\r\n                    onChange = { handleInputChange }                                \r\n                />\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block mb-5\"\r\n                >\r\n                    Register\r\n                </button>\r\n\r\n                \r\n                <Link \r\n                    to=\"/auth/login\"\r\n                    className=\"link\"\r\n                >\r\n                    Already registered?\r\n                </Link>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","//Tener todas las páginas que estan relacionadas al Auth, el Login y Register\r\n\r\nimport React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\r\n\r\nexport const AuthRouter = () => {\r\n    return (\r\n        <div className=\"auth__main\">\r\n            <div className=\"auth__box-container\">\r\n                <Switch>\r\n                    <Route  path=\"/auth/login\" component={ LoginScreen } />\r\n                    <Route  path=\"/auth/register\" component={ RegisterScreen } />\r\n                    <Redirect to=\"/auth/login\" />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startSaveNote, startUploading } from '../../actions/notes';\r\n\r\nexport const NotesAppBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { active: note } = useSelector( state => state.notes );\r\n\r\n\r\n    const handleSave = () => {\r\n        //console.log( note );\r\n        dispatch( startSaveNote( note ) );\r\n    }\r\n\r\n    const handlePictureClick = () => {\r\n        document.querySelector('#fileSelector').click();\r\n    }\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if ( file ) {\r\n            dispatch( startUploading( file ));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"notes__appbar\">\r\n            <span>21 de Octubre de 2020</span>\r\n            \r\n            <input \r\n                id=\"fileSelector\"\r\n                type=\"file\"\r\n                style={{ display: 'none' }}\r\n                onChange={ handleFileChange}\r\n            />\r\n\r\n            <div>\r\n                <button \r\n                    className=\"btn\"\r\n                    onClick={ handlePictureClick }\r\n                >\r\n                    Picture\r\n                </button>\r\n                \r\n                <button \r\n                    className=\"btn\"\r\n                    onClick = { handleSave }\r\n                >\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { activeNote, startDeleting } from '../../actions/notes';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { NotesAppBar } from './NotesAppBar'\r\n\r\nexport const NoteScreen = () => {\r\n\r\n    //Referencia a la nota activa\r\n    const { active: note } = useSelector(state => state.notes);\r\n    //console.log( note );\r\n    const [ formValues, handleInputChange, reset ] = useForm(note); \r\n    //console.log(formValues);\r\n    const { body, title, id} = formValues;\r\n\r\n    const activeId = useRef( note.id ); //almaceno el id de la nota activa\r\n    \r\n    ///////////////////////////////////////\r\n    //actualizar nota cada que cambie el id\r\n    useEffect(() => {\r\n        \r\n        if( note.id !== activeId.current ) {\r\n            reset( note );\r\n            activeId.current = note.id\r\n        }\r\n        \r\n    }, [ note, reset ])\r\n    //////////////////////////////////////////\r\n\r\n    //////////////////////////////////////////////\r\n    //Cambiar el store de lo que escriba el usuario\r\n    const dispatch = useDispatch() \r\n    useEffect(() => {\r\n        \r\n        dispatch( activeNote( formValues.id, { ...formValues }) )\r\n    }, [formValues, dispatch])\r\n    //////////////////////////////////////////////////\r\n\r\n    const handleDelete = () => {\r\n        dispatch( startDeleting( id ));\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"notes__main-content\"> \r\n            <NotesAppBar />\r\n\r\n            {/*Agrupador de mi formulario */}\r\n            <div className=\"notes__content\">\r\n                \r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Some awesome title\"\r\n                    className=\"notes__title-input\"\r\n                    autoComplete=\"off\"\r\n                    name = 'title'\r\n                    value = { title }\r\n                    onChange = { handleInputChange }\r\n                />\r\n\r\n                <textarea\r\n                    placeholder=\"What happen today\"\r\n                    className=\"notes__textarea\"\r\n                    name = 'body'\r\n                    value = { body }\r\n                    onChange = { handleInputChange }\r\n                ></textarea>\r\n\r\n                {   \r\n                    (note.url) \r\n                    && (\r\n                        <div className=\"notes__image\">\r\n                            <img\r\n                                src={ note.url }\r\n                                alt=\"Imagen\"\r\n                            />\r\n                        </div>\r\n                        )               \r\n                }\r\n\r\n            </div>\r\n            \r\n            <button \r\n                className=\"btn btn-danger\"\r\n                onClick = { handleDelete }\r\n            >\r\n                Delete\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const NothingSelected = () => {\r\n    return (\r\n        <div className=\"nothing__main-content\">\r\n            <p>\r\n                Seleccione inventario\r\n                <br/>\r\n                o cree nuevo inventario!\r\n            </p>\r\n\r\n            <i className=\"far fa-star fa-4x mt-5\"></i>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { useDispatch } from 'react-redux';\r\nimport { activeNote } from '../../actions/notes';\r\n\r\n\r\nexport const JournalEntry = ( {id, date, title, body, url} ) => {\r\n    \r\n    //console.log(id, date, title, body, url);\r\n    const dispatch = useDispatch();\r\n\r\n    const noteDate = moment(date);\r\n    //console.log(noteDate);\r\n\r\n    const handleEntryClick = () => {\r\n        //dispatch activeNote\r\n        dispatch( activeNote( id, {\r\n            title, body, date, url\r\n            })\r\n        );\r\n\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className=\"journal__entry animate__animated animate__fadeIn animate__faster\"\r\n            onClick = { handleEntryClick }\r\n        >\r\n            {/*Imagen */}\r\n            {\r\n                url && //si url es diferente de undefined\r\n                <div \r\n                    className=\"journal__entry-picture\"\r\n                    style={{\r\n                        backgroundSize: 'cover',\r\n                        backgroundImage: `url(${ url })`\r\n                    }}\r\n                ></div>\r\n            }\r\n\r\n            {/*Contenedor del texto y otras cosas... */}\r\n            <div className=\"journal__entry-body\">\r\n                <p className=\"journal__entry-title\">\r\n                    { title }\r\n                </p>\r\n                <p className=\"journal__entry-content\">\r\n                    { body }\r\n                </p>\r\n            </div>\r\n            {/*Para la fecha */}\r\n            <div className=\"journal__entry-date-box\">\r\n                <span>{ noteDate.format('dddd') }</span>\r\n                <h4>{ noteDate.format('Do') }</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { JournalEntry } from './JournalEntry'\r\n\r\nexport const JournalEntries = () => {\r\n\r\n    const { notes } = useSelector(state => state.notes);\r\n    //console.log(notes);\r\n    \r\n    return (\r\n        <div className=\"journal__entries\">\r\n            {\r\n                notes.map( note => (\r\n                    <JournalEntry \r\n                        key={ note.id } \r\n                        {...note}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { startLogout } from '../../actions/auth';\r\nimport { startNewNote } from '../../actions/notes';\r\nimport { JournalEntries } from './JournalEntries'\r\n\r\nexport const Sidebar = () => {\r\n\r\n    const {name} = useSelector(state => state.auth);\r\n    //console.log(name);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogout = () => {\r\n        dispatch( startLogout() );\r\n    }\r\n\r\n    const handleAddNew = () => {\r\n        dispatch( startNewNote() );\r\n    }\r\n\r\n    return (\r\n        <aside className=\"journal__sidebar\">\r\n            <div className=\"journal__sidebar-navbar\">\r\n                <h3 className=\"mt-5\">\r\n                    <i className=\"far fa-moon\"></i>\r\n                    <span> {name}</span>\r\n                </h3>\r\n\r\n                <button \r\n                    className=\"btn\"\r\n                    onClick = { handleLogout }\r\n                >\r\n                    Logout\r\n                </button>\r\n            </div>\r\n\r\n            <div \r\n                className=\"journal__new-entry\"\r\n                onClick={ handleAddNew }\r\n            >\r\n                <i className=\"far fa-calendar-plus fa-5x\"></i>\r\n                <p className=\"mt-5\">\r\n                    Inventario Nuevo\r\n                </p>\r\n            </div>\r\n\r\n            <JournalEntries />\r\n        </aside>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NoteScreen } from '../notes/NoteScreen';\r\nimport { NothingSelected } from './NothingSelected';\r\nimport { Sidebar } from './Sidebar';\r\n\r\nexport const JournalScreen = () => {\r\n\r\n    const { active } = useSelector( state => state.notes );\r\n\r\n\r\n    return (\r\n        <div className=\"journal__main-content animate__animated animate__fadeIn animate__faster\">\r\n            \r\n            <Sidebar />\r\n\r\n            {/*Contenido principal*/}\r\n            <main>\r\n\r\n                {\r\n                    ( active )\r\n                        ? ( <NoteScreen /> )\r\n                        : ( <NothingSelected /> )\r\n                }\r\n                \r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const PublicRoute = ({\r\n    isLoggedIn,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n\r\n    return (\r\n        <Route { ...rest }\r\n\r\n            component={ (props) => (\r\n                ( !isLoggedIn )\r\n                    ? ( <Component { ...props } /> ) \r\n                    : ( <Redirect to=\"/\" /> )\r\n            )\r\n            }\r\n\r\n        />\r\n    )\r\n}\r\n\r\nPublicRoute.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\n\r\n//protección de rutas\r\n\r\n\r\nexport const PrivateRoute = ({\r\n    isLoggedIn,\r\n    component: Component,\r\n    ...rest //resto de los elementos de esa manera puedo pasarselo al componente de la manera que quiero\r\n}) => {\r\n\r\n    return (\r\n        <Route { ...rest }\r\n\r\n            component={ (props) => (\r\n                (isLoggedIn )\r\n                    ? ( <Component { ...props } /> ) \r\n                    : ( <Redirect to=\"/auth/login\" /> )\r\n            )\r\n            }\r\n\r\n        />\r\n    )\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","//sistema de rutas principal\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect,\r\n  } from \"react-router-dom\";\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { firebase } from '../firebase/firebase-config';\r\n\r\nimport { AuthRouter } from './AuthRouter';\r\nimport { JournalScreen } from '../components/jorunal/JournalScreen';\r\nimport { login } from '../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { startLoadingNotes } from '../actions/notes';\r\n\r\nexport const AppRouter = () => {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    //Respuesta del fireStore para saber si tiene UID, osea usuario logueado\r\n        //estado local\r\n    const [ cheking, setCheking ] = useState(true);\r\n\r\n\r\n    //Controlador de la rutas privada o publica\r\n    const [ isLoggedIn, setIsLoggedIn ] = useState(false);\r\n\r\n    //pendiente de los datos de autenticación usId, displayName de la sesión\r\n    useEffect(() => {\r\n        \r\n        firebase.auth().onAuthStateChanged( async(user) => {\r\n\r\n            if ( user?.uid ) {\r\n                dispatch( login( user.uid, user.displayName ) );\r\n                setIsLoggedIn( true );\r\n\r\n                //función regreso notes\r\n                dispatch( startLoadingNotes( user.uid ) );\r\n\r\n            } else {\r\n                setIsLoggedIn( false );\r\n            }\r\n\r\n            setCheking(false);\r\n\r\n        });\r\n       \r\n    }, [ dispatch, setCheking, setIsLoggedIn ]);\r\n\r\n    if ( cheking ) {\r\n        return (\r\n            <h1>Wait...</h1>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Router>\r\n              <div>  \r\n                <Switch>\r\n                    <PublicRoute \r\n                        path=\"/auth\" \r\n                        component={ AuthRouter } \r\n                        isLoggedIn = { isLoggedIn }\r\n                    />\r\n                    \r\n                    <PrivateRoute \r\n                        exact path=\"/\" \r\n                        component={ JournalScreen } \r\n                        isLoggedIn = { isLoggedIn }\r\n                    />\r\n\r\n                    <Redirect to=\"/auth/login\" />\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","\r\n/*\r\n    {\r\n        notes: [],\r\n        active: null, \r\n        active: {\r\n            id: 'aasdasd',\r\n            title: '',\r\n            body: '',\r\n            imageUrl: '',\r\n            date: 123123\r\n        }\r\n    }\r\n*/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    notes: [],\r\n    active: null\r\n}\r\n\r\nexport const notesReducer = ( state = initialState, action ) => {\r\n\r\n    switch (action.type) {\r\n        \r\n        case types.notesActive:\r\n            return {\r\n                ...state,\r\n                active: {\r\n                    ...action.payload\r\n                }\r\n            }\r\n\r\n        case types.notesAddNew:\r\n            return {\r\n                ...state,\r\n                notes: [ action.payload, ...state.notes ]\r\n            }\r\n\r\n        case types.notesLoad:\r\n            //console.log( action.payload );\r\n            return {\r\n                ...state, //nuevo estado\r\n                notes: [ ...action.payload ] //como es un arreglo lo esparcimos con el operador ...spread\r\n            }\r\n        \r\n        case types.notesUpdated:\r\n            return {\r\n                ...state,\r\n                notes: state.notes.map(\r\n                    note => note.id === action.payload.id\r\n                        ? action.payload.note\r\n                        : note\r\n                )\r\n            }\r\n\r\n        case types.notesDelete:\r\n            return {\r\n                ...state,\r\n                active: null,\r\n                notes: state.notes.filter( note => note.id !== action.payload )\r\n            }\r\n            \r\n        case types.notesLogoutCleaning:\r\n            return {\r\n                ...state,\r\n                active: null,\r\n                notes: []\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    msgError: null\r\n}\r\n\r\n\r\nexport const uiReducer = ( state  = initialState, action ) => {\r\n\r\n    switch (action.type) {\r\n        case types.uiSetError:\r\n            return {\r\n                ...state,\r\n                msgError: action.payload\r\n            }\r\n\r\n        case types.uiRemoveError:\r\n            return {\r\n                ...state,\r\n                msgError: null\r\n            }\r\n\r\n        case types.uiStartLoading:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n\r\n        case types.uiFinishLoading:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { authReducer } from '../reducers/authReducer';\r\nimport { notesReducer } from '../reducers/notesReducer';\r\nimport { uiReducer } from '../reducers/uiReducer';\r\n\r\n//aplicar diferentes middlewares\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n\r\n//Para poder usar multiples reducers, ya que por defecto solo admite 1\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    ui: uiReducer,\r\n    notes: notesReducer\r\n})\r\n\r\n//Configuración para trabajar acciones asíncronas en nuestra aplicación\r\nexport const store = createStore(\r\n    reducers, \r\n    composeEnhancers(\r\n        applyMiddleware( thunk )\r\n    )\r\n);","import { types } from \"../types/types\";\r\n\r\n/*\r\n    { El state va estar vacío cuando no este autenticado\r\n        uid: 'asdasdasd1223', //autenticación de Firebase por ahora\r\n        name: 'Stiven'\r\n    }\r\n*/\r\n\r\n\r\nexport const authReducer = (state = {}, action) => {\r\n\r\n    //acciones\r\n    switch ( action.type ) {\r\n        case types.login:       \r\n            return {\r\n                uid: action.payload.uid,\r\n                name: action.payload.displayName\r\n            }\r\n\r\n        case types.logout:       \r\n        return {}\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nimport { AppRouter } from './routers/AppRouter';\r\nimport { store } from './store/store';\r\n\r\nexport const JournalApp = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <AppRouter />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { JournalApp } from './JournalApp';\nimport './styles/styles.scss';\n\nReactDOM.render(\n    <JournalApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}